genotype <- read.csv("/Users/nosheenfatima/Documents/WSU course folders/Statistical Genomics/HW1/Demodata/genotype.csv", header = TRUE, row.names = 1)
# Convert to numeric matrix
X <- as.matrix(genotype)
X <- apply(X, 2, as.numeric)  # Convert all columns to numeric
# Add row and column names
rownames(X) <- rownames(genotype)  # Individual IDs as row names
colnames(X) <- colnames(genotype)  # SNP IDs as column names
# Check for constant columns
constant_columns <- apply(X, 2, function(col) length(unique(col)) == 1)
print(paste("Number of constant columns:", sum(constant_columns)))
# Remove constant columns
X <- X[, !constant_columns]
# Check for missing values
missing_values <- sum(is.na(X))
print(paste("Number of missing values in X:", missing_values))
# Handle missing values
if (missing_values > 0) {
X[is.na(X)] <- mean(X, na.rm = TRUE)  # Replace NAs with the column mean
}
# Verify that there are no missing values
print(paste("Number of missing values after handling:", sum(is.na(X))))
# Load phenotype and covariates data
phenotype <- read.csv("/Users/nosheenfatima/Documents/WSU course folders/Statistical Genomics/HW1/Demodata/Phenotype.csv")
covariates <- read.csv("/Users/nosheenfatima/Documents/WSU course folders/Statistical Genomics/HW1/Demodata/Covariates.csv")
# Extract phenotype (assuming the second column contains the phenotype)
y <- as.numeric(phenotype[, 2])
# Clean covariates data (remove individual IDs if present)
C <- covariates[, -1]  # Remove the first column (individual IDs)
C <- apply(C, 2, as.numeric)  # Convert all columns to numeric
C[is.na(C)] <- mean(C, na.rm = TRUE)  # Impute missing values
# Run GWAS
pvals <- gwas_glm(y, X, C, include_pcs = TRUE, npcs = 3)
head(pvals)
# Save results
write.csv(data.frame(SNP = colnames(X), Pvalue = pvals), file = "/Users/nosheenfatima/Documents/WSU course folders/Statistical Genomics/HW1/Demodata/gwas_results.csv", row.names = FALSE)
head(pvals)
############ Verify ##############################################################################
# Create Manhattan plot
plot(-log10(pvals), pch = 20, main = "Manhattan Plot", xlab = "SNP", ylab = "-log10(p-value)")
# Add Bonferroni threshold line
abline(h = -log10(0.05 / length(pvals)), col = "red", lty = 2)
##################################Add SNP information for Chromosme numbers ##############################
# Load SNP information
snp_info <- read.csv("/Users/nosheenfatima/Documents/WSU course folders/Statistical Genomics/HW1/Demodata/SNPinformation.csv")
# Check the structure of the file
str(snp_info)
# Create a data frame with SNP names and p-values
gwas_results <- data.frame(SNP = colnames(X), Pvalue = pvals)
# Merge with SNP information
gwas_results <- merge(gwas_results, snp_info, by = "SNP")
# Check the merged data
str(gwas_results)
head(gwas_results)
summary(gwas_results$Position)
# Load required libraries
library(dplyr)
library(ggplot2)
# Calculate cumulative positions
gwas_results <- gwas_results %>%
group_by(Chromosome) %>%
mutate(Cumulative_Position = row_number()) %>%
ungroup()
# Add an offset for each chromosome to separate them
chromosome_offsets <- gwas_results %>%
group_by(Chromosome) %>%
summarize(Max_Position = max(Cumulative_Position)) %>%
mutate(Offset = cumsum(lag(Max_Position, default = 0)))
# Merge offsets back into the main data
gwas_results <- gwas_results %>%
left_join(chromosome_offsets, by = "Chromosome") %>%
mutate(Cumulative_Position = Cumulative_Position + Offset)
# Create Manhattan plot
ggplot(gwas_results, aes(x = Cumulative_Position, y = -log10(Pvalue), color = as.factor(Chromosome))) +
geom_point(alpha = 0.5, size = 1) +
labs(title = "Manhattan Plot", x = "Chromosome", y = "-log10(p-value)") +
theme_minimal() +
theme(legend.position = "none") +
geom_hline(yintercept = -log10(0.05 / nrow(gwas_results)), col = "red", linetype = "dashed") +
scale_x_continuous(breaks = chromosome_offsets$Offset + chromosome_offsets$Max_Position / 2,
labels = chromosome_offsets$Chromosome)
pvals <- apply(X, 2, function(marker) {
model_data <- data.frame(y = y, marker = marker)
if (!is.null(C)) model_data <- cbind(model_data, C)
model <- glm(y ~ ., data = model_data, family = gaussian())
summary(model)$coefficients["marker", "Pr(>|t|)"]
})
return(pvals)
}
pca_adjustment <- function(X, C = NULL, npcs = 5) {
pcs <- prcomp(X, center = TRUE, scale. = TRUE)$x[, 1:npcs]
if (!is.null(C) && qr(cbind(C, pcs))$rank == qr(C)$rank) {
pcs <- NULL  # Exclude dependent PCs
}
list(adjusted_covariates = if (!is.null(C)) cbind(C, pcs) else pcs)
}
gwas_glm <- function(y, X, C = NULL, include_pcs = FALSE, npcs = 5) {
if (length(y) != nrow(X) || (!is.null(C) && nrow(C) != length(y))) {
stop("Input dimensions do not match.")
}
if (include_pcs) {
C <- pca_adjustment(X, C, npcs)$adjusted_covariates
}
#########################Check the function on demodata #################################################
# Load genotype data
genotype <- read.csv("/Users/nosheenfatima/Documents/WSU course folders/Statistical Genomics/HW1/Demodata/genotype.csv", header = TRUE, row.names = 1)
# Convert to numeric matrix
X <- as.matrix(genotype)
X <- apply(X, 2, as.numeric)  # Convert all columns to numeric
# Add row and column names
rownames(X) <- rownames(genotype)  # Individual IDs as row names
colnames(X) <- colnames(genotype)  # SNP IDs as column names
# Check for constant columns
constant_columns <- apply(X, 2, function(col) length(unique(col)) == 1)
print(paste("Number of constant columns:", sum(constant_columns)))
# Remove constant columns
X <- X[, !constant_columns]
# Check for missing values
missing_values <- sum(is.na(X))
print(paste("Number of missing values in X:", missing_values))
# Handle missing values
if (missing_values > 0) {
X[is.na(X)] <- mean(X, na.rm = TRUE)  # Replace NAs with the column mean
}
# Verify that there are no missing values
print(paste("Number of missing values after handling:", sum(is.na(X))))
# Load phenotype and covariates data
phenotype <- read.csv("/Users/nosheenfatima/Documents/WSU course folders/Statistical Genomics/HW1/Demodata/Phenotype.csv")
covariates <- read.csv("/Users/nosheenfatima/Documents/WSU course folders/Statistical Genomics/HW1/Demodata/Covariates.csv")
# Extract phenotype (assuming the second column contains the phenotype)
y <- as.numeric(phenotype[, 2])
# Clean covariates data (remove individual IDs if present)
C <- covariates[, -1]  # Remove the first column (individual IDs)
C <- apply(C, 2, as.numeric)  # Convert all columns to numeric
C[is.na(C)] <- mean(C, na.rm = TRUE)  # Impute missing values
# Run GWAS
pvals <- gwas_glm(y, X, C, include_pcs = TRUE, npcs = 3)
head(pvals)
# Save results
write.csv(data.frame(SNP = colnames(X), Pvalue = pvals), file = "/Users/nosheenfatima/Documents/WSU course folders/Statistical Genomics/HW1/Demodata/gwas_results.csv", row.names = FALSE)
head(pvals)
############ Verify ##############################################################################
# Create Manhattan plot
plot(-log10(pvals), pch = 20, main = "Manhattan Plot", xlab = "SNP", ylab = "-log10(p-value)")
# Add Bonferroni threshold line
abline(h = -log10(0.05 / length(pvals)), col = "red", lty = 2)
##################################Add SNP information for Chromosme numbers ##############################
# Load SNP information
snp_info <- read.csv("/Users/nosheenfatima/Documents/WSU course folders/Statistical Genomics/HW1/Demodata/SNPinformation.csv")
# Check the structure of the file
str(snp_info)
# Create a data frame with SNP names and p-values
gwas_results <- data.frame(SNP = colnames(X), Pvalue = pvals)
# Merge with SNP information
gwas_results <- merge(gwas_results, snp_info, by = "SNP")
# Check the merged data
str(gwas_results)
head(gwas_results)
summary(gwas_results$Position)
# Load required libraries
library(dplyr)
library(ggplot2)
# Calculate cumulative positions
gwas_results <- gwas_results %>%
group_by(Chromosome) %>%
mutate(Cumulative_Position = row_number()) %>%
ungroup()
# Add an offset for each chromosome to separate them
chromosome_offsets <- gwas_results %>%
group_by(Chromosome) %>%
summarize(Max_Position = max(Cumulative_Position)) %>%
mutate(Offset = cumsum(lag(Max_Position, default = 0)))
# Merge offsets back into the main data
gwas_results <- gwas_results %>%
left_join(chromosome_offsets, by = "Chromosome") %>%
mutate(Cumulative_Position = Cumulative_Position + Offset)
# Create Manhattan plot
ggplot(gwas_results, aes(x = Cumulative_Position, y = -log10(Pvalue), color = as.factor(Chromosome))) +
geom_point(alpha = 0.5, size = 1) +
labs(title = "Manhattan Plot", x = "Chromosome", y = "-log10(p-value)") +
theme_minimal() +
theme(legend.position = "none") +
geom_hline(yintercept = -log10(0.05 / nrow(gwas_results)), col = "red", linetype = "dashed") +
scale_x_continuous(breaks = chromosome_offsets$Offset + chromosome_offsets$Max_Position / 2,
labels = chromosome_offsets$Chromosome)
pvals <- apply(X, 2, function(marker) {
model_data <- data.frame(y = y, marker = marker)
if (!is.null(C)) model_data <- cbind(model_data, C)
model <- glm(y ~ ., data = model_data, family = gaussian())
summary(model)$coefficients["marker", "Pr(>|t|)"]
})
return(pvals)
}
gwas_glm <- function(y, X, C = NULL, include_pcs = FALSE, npcs = 5) {
if (length(y) != nrow(X) || (!is.null(C) && nrow(C) != length(y))) {
stop("Input dimensions do not match.")
}
if (include_pcs) {
C <- pca_adjustment(X, C, npcs)$adjusted_covariates
}
pvals <- apply(X, 2, function(marker) {
model_data <- data.frame(y = y, marker = marker)
if (!is.null(C)) model_data <- cbind(model_data, C)
model <- glm(y ~ ., data = model_data, family = gaussian())
summary(model)$coefficients["marker", "Pr(>|t|)"]
})
return(pvals)
}
pca_adjustment <- function(X, C = NULL, npcs = 5) {
pcs <- prcomp(X, center = TRUE, scale. = TRUE)$x[, 1:npcs]
if (!is.null(C) && qr(cbind(C, pcs))$rank == qr(C)$rank) {
pcs <- NULL  # Exclude dependent PCs
}
list(adjusted_covariates = if (!is.null(C)) cbind(C, pcs) else pcs)
}
#########################Check the function on demodata #################################################
# Load genotype data
genotype <- read.csv("/Users/nosheenfatima/Documents/WSU course folders/Statistical Genomics/HW1/Demodata/genotype.csv", header = TRUE, row.names = 1)
# Convert to numeric matrix
X <- as.matrix(genotype)
X <- apply(X, 2, as.numeric)  # Convert all columns to numeric
# Add row and column names
rownames(X) <- rownames(genotype)  # Individual IDs as row names
colnames(X) <- colnames(genotype)  # SNP IDs as column names
# Check for constant columns
constant_columns <- apply(X, 2, function(col) length(unique(col)) == 1)
print(paste("Number of constant columns:", sum(constant_columns)))
# Remove constant columns
X <- X[, !constant_columns]
# Check for missing values
missing_values <- sum(is.na(X))
print(paste("Number of missing values in X:", missing_values))
# Handle missing values
if (missing_values > 0) {
X[is.na(X)] <- mean(X, na.rm = TRUE)  # Replace NAs with the column mean
}
# Verify that there are no missing values
print(paste("Number of missing values after handling:", sum(is.na(X))))
# Load phenotype and covariates data
phenotype <- read.csv("/Users/nosheenfatima/Documents/WSU course folders/Statistical Genomics/HW1/Demodata/Phenotype.csv")
covariates <- read.csv("/Users/nosheenfatima/Documents/WSU course folders/Statistical Genomics/HW1/Demodata/Covariates.csv")
# Extract phenotype (assuming the second column contains the phenotype)
y <- as.numeric(phenotype[, 2])
# Clean covariates data (remove individual IDs if present)
C <- covariates[, -1]  # Remove the first column (individual IDs)
C <- apply(C, 2, as.numeric)  # Convert all columns to numeric
C[is.na(C)] <- mean(C, na.rm = TRUE)  # Impute missing values
# Run GWAS
pvals <- gwas_glm(y, X, C, include_pcs = TRUE, npcs = 3)
head(pvals)
#  GLM-based GWAS function
gwas_glm <- function(y, X, C = NULL, include_pcs = FALSE, npcs = 5) {
if (length(y) != nrow(X)) stop("Length of y must match the number of rows in X.")
if (!is.null(C) && nrow(C) != length(y)) stop("Number of rows in C must match the length of y.")
if (include_pcs) C <- pca_adjustment(X, C, npcs)$adjusted_covariates
pvals <- sapply(1:ncol(X), function(i) {
model_data <- data.frame(y = y, marker = X[, i])
if (!is.null(C)) model_data <- cbind(model_data, C)
summary(glm(y ~ ., data = model_data, family = gaussian()))$coefficients["marker", "Pr(>|t|)"]
})
return(pvals)
}
#  PCA adjustment function
pca_adjustment <- function(X, C = NULL, npcs = 5) {
pcs <- prcomp(X, center = TRUE, scale. = TRUE)$x[, 1:npcs]
if (!is.null(C)) {
rank_combined <- qr(cbind(C, pcs))$rank
rank_C <- qr(C)$rank
if (rank_combined == rank_C) {
warning("Some PCs are linearly dependent with covariates. Excluding dependent PCs.")
pcs <- pcs[, (rank_C + 1):npcs]
}
}
list(adjusted_covariates = if (!is.null(C)) cbind(C, pcs) else pcs, pcs = pcs)
}
#########################Check the function on demodata #################################################
# Load genotype data
genotype <- read.csv("/Users/nosheenfatima/Documents/WSU course folders/Statistical Genomics/HW1/Demodata/genotype.csv", header = TRUE, row.names = 1)
# Convert to numeric matrix
X <- as.matrix(genotype)
X <- apply(X, 2, as.numeric)  # Convert all columns to numeric
# Add row and column names
rownames(X) <- rownames(genotype)  # Individual IDs as row names
colnames(X) <- colnames(genotype)  # SNP IDs as column names
# Check for constant columns
constant_columns <- apply(X, 2, function(col) length(unique(col)) == 1)
print(paste("Number of constant columns:", sum(constant_columns)))
# Remove constant columns
X <- X[, !constant_columns]
# Check for missing values
missing_values <- sum(is.na(X))
print(paste("Number of missing values in X:", missing_values))
# Handle missing values
if (missing_values > 0) {
X[is.na(X)] <- mean(X, na.rm = TRUE)  # Replace NAs with the column mean
}
# Verify that there are no missing values
print(paste("Number of missing values after handling:", sum(is.na(X))))
# Load phenotype and covariates data
phenotype <- read.csv("/Users/nosheenfatima/Documents/WSU course folders/Statistical Genomics/HW1/Demodata/Phenotype.csv")
covariates <- read.csv("/Users/nosheenfatima/Documents/WSU course folders/Statistical Genomics/HW1/Demodata/Covariates.csv")
# Extract phenotype (assuming the second column contains the phenotype)
y <- as.numeric(phenotype[, 2])
# Clean covariates data (remove individual IDs if present)
C <- covariates[, -1]  # Remove the first column (individual IDs)
C <- apply(C, 2, as.numeric)  # Convert all columns to numeric
C[is.na(C)] <- mean(C, na.rm = TRUE)  # Impute missing values
# Run GWAS
pvals <- gwas_glm(y, X, C, include_pcs = TRUE, npcs = 3)
head(pvals)
# Save results
write.csv(data.frame(SNP = colnames(X), Pvalue = pvals), file = "/Users/nosheenfatima/Documents/WSU course folders/Statistical Genomics/HW1/Demodata/gwas_results.csv", row.names = FALSE)
head(pvals)
############ Verify ##############################################################################
# Create Manhattan plot
plot(-log10(pvals), pch = 20, main = "Manhattan Plot", xlab = "SNP", ylab = "-log10(p-value)")
# Add Bonferroni threshold line
abline(h = -log10(0.05 / length(pvals)), col = "red", lty = 2)
##################################Add SNP information for Chromosme numbers ##############################
# Load SNP information
snp_info <- read.csv("/Users/nosheenfatima/Documents/WSU course folders/Statistical Genomics/HW1/Demodata/SNPinformation.csv")
# Check the structure of the file
str(snp_info)
# Create a data frame with SNP names and p-values
gwas_results <- data.frame(SNP = colnames(X), Pvalue = pvals)
# Merge with SNP information
gwas_results <- merge(gwas_results, snp_info, by = "SNP")
# Check the merged data
str(gwas_results)
head(gwas_results)
summary(gwas_results$Position)
# Load required libraries
library(dplyr)
library(ggplot2)
# Calculate cumulative positions
gwas_results <- gwas_results %>%
group_by(Chromosome) %>%
mutate(Cumulative_Position = row_number()) %>%
ungroup()
# Add an offset for each chromosome to separate them
chromosome_offsets <- gwas_results %>%
group_by(Chromosome) %>%
summarize(Max_Position = max(Cumulative_Position)) %>%
mutate(Offset = cumsum(lag(Max_Position, default = 0)))
# Merge offsets back into the main data
gwas_results <- gwas_results %>%
left_join(chromosome_offsets, by = "Chromosome") %>%
mutate(Cumulative_Position = Cumulative_Position + Offset)
# Create Manhattan plot
ggplot(gwas_results, aes(x = Cumulative_Position, y = -log10(Pvalue), color = as.factor(Chromosome))) +
geom_point(alpha = 0.5, size = 1) +
labs(title = "Manhattan Plot", x = "Chromosome", y = "-log10(p-value)") +
theme_minimal() +
theme(legend.position = "none") +
geom_hline(yintercept = -log10(0.05 / nrow(gwas_results)), col = "red", linetype = "dashed") +
scale_x_continuous(breaks = chromosome_offsets$Offset + chromosome_offsets$Max_Position / 2,
labels = chromosome_offsets$Chromosome)
pvals <- apply(X, 2, function(marker) {
model_data <- data.frame(y = y, marker = marker)
if (!is.null(C)) model_data <- cbind(model_data, C)
model <- glm(y ~ ., data = model_data, family = gaussian())
summary(model)$coefficients["marker", "Pr(>|t|)"]
})
return(pvals)
##########################finalnew concise test###########
#  GLM-based GWAS function
gwas_glm <- function(y, X, C = NULL, include_pcs = FALSE, npcs = 5) {
if (length(y) != nrow(X)) stop("Length of y must match the number of rows in X.")
if (!is.null(C) && nrow(C) != length(y)) stop("Number of rows in C must match the length of y.")
if (include_pcs) C <- pca_adjustment(X, C, npcs)$adjusted_covariates
pvals <- sapply(1:ncol(X), function(i) {
model_data <- data.frame(y = y, marker = X[, i])
if (!is.null(C)) model_data <- cbind(model_data, C)
summary(glm(y ~ ., data = model_data, family = gaussian()))$coefficients["marker", "Pr(>|t|)"]
})
return(pvals)
}
#  PCA adjustment function
pca_adjustment <- function(X, C = NULL, npcs = 5) {
pcs <- prcomp(X, center = TRUE, scale. = TRUE)$x[, 1:npcs]
if (!is.null(C)) {
rank_combined <- qr(cbind(C, pcs))$rank
rank_C <- qr(C)$rank
if (rank_combined == rank_C) {
warning("Some PCs are linearly dependent with covariates. Excluding dependent PCs.")
pcs <- pcs[, (rank_C + 1):npcs]
}
}
list(adjusted_covariates = if (!is.null(C)) cbind(C, pcs) else pcs, pcs = pcs)
}
genotype <- read.csv("/Users/nosheenfatima/Documents/WSU course folders/Statistical Genomics/HW1/mydata/GD1.csv", header = TRUE, row.names = 1)
# Convert genotype data to numeric matrix
X <- as.matrix(genotype)
# Retain SNP names (column names)
snp_names <- colnames(X)
# Retain individual names (row names)
indiv_names <- rownames(X)
# Load phenotype data
phenotype <- read.csv("/Users/nosheenfatima/Documents/WSU course folders/Statistical Genomics/HW1/mydata/Phenotype.csv")
# Check the structure of the phenotype data
head(phenotype)
str(phenotype)
# Ensure the phenotype data has individual IDs
# Assuming the first column is individual IDs and the second column is the phenotype
indiv_ids <- phenotype[, 1]  # Individual IDs
y <- as.numeric(phenotype[, 2])  # Phenotype values
names(y) <- indiv_ids  # Assign individual IDs to y
# Check if individual IDs in y match row names of X
print("Individual IDs in y:")
print(names(y))
print("Row names in X:")
print(rownames(X))
# Find common individuals
common_indiv <- intersect(names(y), rownames(X))
# Subset y and X to include only common individuals
y <- y[common_indiv]
X <- X[common_indiv, ]
# Run GWAS with PCA adjustment
pvals <- gwas_glm(y, X, C = NULL, include_pcs = FALSE, npcs = 5)
# Assign SNP IDs to pvals
names(pvals) <- colnames(X)
# Check the structure of pvals
head(pvals)
gwas_glm <- function(y, X, C = NULL, include_pcs = FALSE, npcs = 5) {
if (length(y) != nrow(X)) stop("Length of y must match the number of rows in X.")
if (!is.null(C) && nrow(C) != length(y)) stop("Number of rows in C must match the length of y.")
if (include_pcs) C <- pca_adjustment(X, C, npcs)$adjusted_covariates
pvals <- sapply(1:ncol(X), function(i) {
model_data <- data.frame(y = y, marker = X[, i])
if (!is.null(C)) model_data <- cbind(model_data, C)
model <- tryCatch(
glm(y ~ ., data = model_data, family = gaussian()),
error = function(e) return(NULL)
)
if (is.null(model)) return(NA)
coef_names <- rownames(summary(model)$coefficients)
if (!"marker" %in% coef_names) return(NA)
return(summary(model)$coefficients["marker", "Pr(>|t|)"])
})
return(pvals)
}
pca_adjustment <- function(X, C = NULL, npcs = 5) {
pcs <- prcomp(X, center = TRUE, scale. = TRUE)$x[, 1:npcs]
if (!is.null(C)) {
rank_combined <- qr(cbind(C, pcs))$rank
rank_C <- qr(C)$rank
if (rank_combined == rank_C) {
warning("Some PCs are linearly dependent with covariates. Excluding dependent PCs.")
pcs <- pcs[, (rank_C + 1):npcs]
}
}
list(adjusted_covariates = if (!is.null(C)) cbind(C, pcs) else pcs, pcs = pcs)
}
genotype <- read.csv("/Users/nosheenfatima/Documents/WSU course folders/Statistical Genomics/HW1/mydata/GD1.csv", header = TRUE, row.names = 1)
# Convert genotype data to numeric matrix
X <- as.matrix(genotype)
# Retain SNP names (column names)
snp_names <- colnames(X)
# Retain individual names (row names)
indiv_names <- rownames(X)
# Load phenotype data
phenotype <- read.csv("/Users/nosheenfatima/Documents/WSU course folders/Statistical Genomics/HW1/mydata/Phenotype.csv")
# Check the structure of the phenotype data
head(phenotype)
str(phenotype)
# Ensure the phenotype data has individual IDs
# Assuming the first column is individual IDs and the second column is the phenotype
indiv_ids <- phenotype[, 1]  # Individual IDs
y <- as.numeric(phenotype[, 2])  # Phenotype values
names(y) <- indiv_ids  # Assign individual IDs to y
# Check if individual IDs in y match row names of X
print("Individual IDs in y:")
print(names(y))
print("Row names in X:")
print(rownames(X))
# Find common individuals
common_indiv <- intersect(names(y), rownames(X))
# Subset y and X to include only common individuals
y <- y[common_indiv]
X <- X[common_indiv, ]
# Run GWAS with PCA adjustment
pvals <- gwas_glm(y, X, C = NULL, include_pcs = FALSE, npcs = 5)
# Assign SNP IDs to pvals
names(pvals) <- colnames(X)
# Check the structure of pvals
head(pvals)
install.packages("usethis")
install.packages("usethis")
install.packages("devtools")
install.packages("roxygen2")  # For documentation
install.packages("testthat")  # For unit testing
create_package("NOVAGLM-X")
library(usethis)
create_package("NOVAGLM-X")
library(usethis)
create_package("NOVAGLM.X")
library(roxygen2)
roxygenize()
library(Glimp)
browseVignettes("Glimp")
vignette("GWAS_Comparison")
?gwas_glm  # Check function documentation
example(gwas_glm)  # Run an example usage of the function
devtools::document()  # Rebuilds the documentation
setwd("/Users/nosheenfatima/Desktop/Glimp")
devtools::document()  # Rebuilds the documentation
devtools::install(build_vignettes = TRUE)
devtools::install(build_vignettes = TRUE)
example(gwas_glm)
devtools::document()
devtools::document()
devtools::install(build_vignettes = TRUE)
example(gwas_glm)
